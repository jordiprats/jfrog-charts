{{- if .Values.buildPlane.k8s.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: k8s-node
  labels:
    {{- include "pipelines.labels" . | nindent 4 }}
    component: k8s-node
spec:
  serviceName: {{ include "pipelines.fullname" . }}-k8s-node
  replicas: {{ .Values.buildPlane.k8s.replicaCount }}
  updateStrategy:
    type: {{ .Values.buildPlane.k8s.updateStrategy }}
  selector:
    matchLabels:
      {{- include "pipelines.selectorLabels" . | nindent 6 }}
      component: k8s-node
  template:
    metadata:
      labels:
        {{- include "pipelines.selectorLabels" . | nindent 8 }}
        component: k8s-node
      annotations:
        checksum/template: {{ include (print .Template.BasePath "/node-templates.yaml") . | sha256sum }}
        checksum/secret: {{ include (print .Template.BasePath "/pipelines-system-yaml.yaml") . | sha256sum }}
    spec:
    {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets }}
    {{- end }}
      serviceAccountName: {{ include "pipelines.fullname" . }}-node-sa
      initContainers:
      - name: wait-for-api
        image: "{{ .Values.initContainer.image }}"
        imagePullPolicy: {{ .Values.initContainer.pullPolicy }}
        command:
        - 'sh'
        - '-c'
        - >
          echo "Waiting for Pipelines API to come up...";
          until nc -z -w 2 {{ include "pipelines.api.name" . }} {{ .Values.pipelines.api.service.port }} && echo API ok; do
            sleep 2;
          done;
      - name: init
        image: "{{ .Values.imageRegistry }}/{{ .Values.buildPlane.k8s.image.repository }}:{{ default .Chart.AppVersion .Values.buildPlane.k8s.image.tag }}"
        imagePullPolicy: {{ .Values.buildPlane.k8s.image.pullPolicy }}
        command:
        - 'sh'
        - '-c'
        - >
          echo "Preparing JFrog folder...";
          cp -vpfr /jfrog-init/* /jfrog;
          echo "Registering Node with Pipelines API...";
          /bin/bash /init-scripts/register-node.sh;
        env:
        - name: PIPELINES_API_IP
          value: {{ include "pipelines.api.name" . }}
        - name: PIPELINES_API_PORT
          value: {{ .Values.pipelines.api.service.port | quote }}
        - name: BASE_DIR
          value: "/jfrog"
        volumeMounts:
        - mountPath: /init-scripts
          name: config-volume
        - name: jfrog-pipelines-folder
          mountPath: /jfrog
        - name: systemyaml
          mountPath: "/tmp/etc/system.yaml"
          subPath: system.yaml
      containers:
      - name: dind
        image: "{{ .Values.buildPlane.k8s.dind.image.repository }}:{{ .Values.buildPlane.k8s.dind.image.tag }}"
        imagePullPolicy: {{ .Values.buildPlane.k8s.dind.image.pullPolicy }}
        securityContext:
          privileged: true
        resources:
{{ toYaml .Values.buildPlane.k8s.dind.resources | indent 10 }}
        volumeMounts:
        - name: docker-graph-storage
          mountPath: /var/lib/docker
        - name: jfrog-pipelines-folder
          mountPath: /jfrog
      - name: node
        image: "{{ .Values.imageRegistry }}/{{ .Values.buildPlane.k8s.image.repository }}:{{ default .Chart.AppVersion .Values.buildPlane.k8s.image.tag }}"
        imagePullPolicy: {{ .Values.buildPlane.k8s.image.pullPolicy }}
        command:
        - '/bin/sh'
        - '-c'
        - >
        {{- if .Values.buildImage.pullSecret }}
          mkdir -p /root/.docker;
          cp /docker-config/.dockerconfigjson /root/.docker/config.json;
        {{- end }}
          export DEFAULT_LANGUAGE_VERSION="$(cat /tmp/etc/system.yaml | grep defaultVersion | cut -d':' -f2- | head -1 | sed -e 's/^[[:space:]]*//')";
          echo "Pull ${IMAGE_REGISTRY_URL}/jfrog/pipelines-u18node:${DEFAULT_LANGUAGE_VERSION} and copy docker cli ...";
          docker run -v /usr/local/bin:/tmp/init-docker -v /opt/docker:/opt/docker ${IMAGE_REGISTRY_URL}/jfrog/pipelines-u18node:${DEFAULT_LANGUAGE_VERSION} /bin/sh -c "cp -f /tmp/init-docker/docker /opt/docker/";
          export NODE_ID="$(cat /jfrog/node_id)";
          export NODE_POOL_ID="$(cat /jfrog/node_pool_id)";
          export LISTEN_QUEUE="1.nodePool_${NODE_POOL_ID}";
          pm2-runtime /jfrog/reqKick/reqKick.app.js;
        {{- if .Values.buildImage.pullSecret }}
          mkdir -p /root/.docker;
          cp /docker-config/.dockerconfigjson /root/.docker/config.json;
        {{- end }}
        lifecycle:
            preStop:
              exec:
                command:
                - '/bin/sh'
                - '-c'
                - >
                  echo "Unregistering Node with API...";
                  /bin/bash /init-scripts/deregister-node.sh;
        env:
        - name: NODE_ID
          value: ""
        - name: LISTEN_QUEUE
          value: ""
        - name: DEFAULT_LANGUAGE_VERSION
          value: ""
        - name: IMAGE_REGISTRY_URL
          value: {{ .Values.buildImage.registry }}
        - name: PIPELINES_API_IP
          value: {{ include "pipelines.api.name" . }}
        - name: PIPELINES_API_PORT
          value: {{ .Values.pipelines.api.service.port | quote }}
        - name: DOCKER_HOST
          value: tcp://localhost:2375
        - name: RUN_MODE
          value: {{ .Values.runMode }}
        - name: PROJECT_ID
          value: "1"
        - name: PIPELINES_NODE_ARCHITECTURE
          value: "x86_64"
        - name: PIPELINES_NODE_OPERATING_SYSTEM
          value: "Ubuntu_18.04"
        - name: REQKICK_DIR
          value: "/jfrog/reqKick"
        - name: REQEXEC_BIN_PATH
          value: "/jfrog/reqExec/dist/main/main"
        - name: REQEXEC_DIR
          value: "/jfrog/reqExec"
        - name: EXECTEMPLATES_DIR
          value: "/jfrog/execTemplates"
        - name: REPORTS_DIR
          value: "/jfrog/reports"
        - name: BASE_DIR
          value: "/jfrog"
        - name: BUILD_PLANE_VERSION
          value: "{{ default .Chart.AppVersion .Values.pipelines.api.image.tag }}"
        - name: PIPELINES_CORE_SERVICES_API_EXTERNALURL
          value: "http://{{ include "pipelines.api.name" . }}:{{ .Values.pipelines.api.service.port }}/v1"
        - name: PIPELINES_CORE_SERVICES_WWW_EXTERNALURL
          value: "http://{{ include "pipelines.www.name" . }}:{{ .Values.pipelines.www.service.port }}"
        - name: PIPELINES_SHARED_MSG_DEFAULTEXCHANGE
          value: "pipelinesEx"
        - name: PIPELINES_AMQP_URL
          valueFrom:
            secretKeyRef:
              name: {{ include "pipelines.fullname" . }}-node-secrets
              key: amqp-url
        resources:
{{ toYaml .Values.buildPlane.k8s.resources | indent 10 }}
        volumeMounts:
        - mountPath: /init-scripts
          name: config-volume
        - name: jfrog-pipelines-folder
          mountPath: /jfrog
        - name: systemyaml
          mountPath: "/tmp/etc/system.yaml"
          subPath: system.yaml
      {{- if .Values.buildImage.pullSecret }}
        - name: docker-config
          mountPath: /docker-config
      {{- end }}
    {{- with .Values.buildPlane.k8s.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.buildPlane.k8s.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.buildPlane.k8s.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
      - name: docker-graph-storage
        emptyDir: {}
      - name: jfrog-pipelines-folder
        emptyDir: {}
      - name: config-volume
        configMap:
          name: {{ include "pipelines.fullname" . }}-node-scripts
      - name: systemyaml
        secret:
          secretName: {{ include "pipelines.fullname" . }}-system-yaml
    {{- if .Values.buildImage.pullSecret }}
      - name: docker-config
        secret:
          secretName: {{ .Values.buildImage.pullSecret }}
    {{- end }}
{{- end }}
